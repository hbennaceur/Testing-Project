name: Security and Unit Tests

on:
  push:
permissions:
  id-token: write
  contents: read

env:
  TRIVY_VERSION: 0.56.1
  BATS_LIB_PATH: '/usr/lib/'

jobs:
  Security_and_Tests:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
    steps:        
     # - name: Login to Azure
      #  uses: azure/login@v1
       # with:
          #client-id: ${{ secrets.AZURE_CLIENT_ID }}
          #tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          #client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          #subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
         # creds: ${{ secrets.AZURE_CREDENTIALS }}
          
     # - name: Fetch secret from Azure Key Vault
       # id: get-secret
        #uses: azure/get-keyvault-secrets@v1
        #with:
         # keyvault: keyvaultapplication
          #secrets: secret1, secret2
          

      - name: Update .env file
        run: |
          echo "Updating .env file..."
        
          if [[ -f backend/.env ]]; then
            echo "Found .env file, updating..."
                    
            sed -i "s/^secret1=changeme/secret1=test1/" backend/.env
                    
            sed -i "s/^secret2=changeme/secret2=test2/" backend/.env
                    
            echo "Updated .env content:"
            cat backend/.env
          else
            echo ".env file not found!"
            exit 1
          fi
      - name: Checkout Code
        uses: actions/checkout@v4    
        
      -  name: Login to ACR
         uses: Azure/docker-login@v1
         with:
           login-server: ${{ secrets.REGISTRY_NAME }}.azurecr.io
           username: ${{ secrets.REGISTRY_USERNAME }}
           password: ${{ secrets.ACR_PASSWORD }}


      - name: Set Variables
        id: vars
        run: echo "image_tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT


      - name: Build analytics Image
        run: |
          cd backend
          docker build --build-arg profile=dev . -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend-test:${{ steps.vars.outputs.image_tag }}
          docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/backend-test:${{ steps.vars.outputs.image_tag }}

      - name: Setup Bats and Bats-libs
        uses: bats-core/bats-action@main
        id: setup-bats
        with:
          bats-version: ${{ matrix.version }}
          support-clean: "false"
          assert-clean: "false"
          detik-clean: "false"
          file-clean: "false"
     # - name: Execute example tests
       # env:
         # TERM: xterm    
       # shell: bash
        #run:
         # bats -T -p tests           

        
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          trivy --version
      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: .cache/trivy
          key: ${{ runner.os }}-trivy-${{ env.TRIVY_VERSION }}          
      - name: Scan Repository for Vulnerabilities
        run: |
          trivy fs --scanners vuln,secret --severity CRITICAL,HIGH . -o trivy-results.json
        env:
          TRIVY_CACHE_DIR: .cache
          TRIVY_DISABLE_VEX_NOTICE: true              
                    
      - name: View Trivy Report
        run: |
          cat trivy-results.json
          
      - name: Run Bats Tests
        run: |
          bats --recursive --timing --verbose-run .
